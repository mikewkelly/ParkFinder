package com.cpsc310.team_name.parkfinder.server.test;

import java.util.ArrayList;
import org.junit.Before;
import org.junit.Test;

import com.cpsc310.team_name.parkfinder.client.Facility;
import com.cpsc310.team_name.parkfinder.client.Park;
import com.cpsc310.team_name.parkfinder.server.ParksListingParser;


public class TestParksListingParser extends junit.framework.TestCase {

	protected ParksListingParser parser;
	protected ArrayList<Park> allParks;
	protected ArrayList<Facility> allFacilities;
	protected Park park0;
	protected Park park1;
	protected Park park2;
	protected Park park3;
	protected Park park4;
	protected Facility facility0;
	protected Facility facility1;
	protected Facility facility2;
	protected Facility facility3;
	protected Facility facility4;

	@Before
	public void runBeforeTests() {
		parser = new ParksListingParser();
		allParks = parser.getPark();
		allFacilities = parser.getFacility();

		// Manually create 3 new Park instances with data taken directly from the City of
		// Vancouver Parks Listing dataset, to compare with data generated by the parser.

		// Arbutus Village Park
		park0 = new Park((long) 1);
		park0.setName("Arbutus Village Park");
		park0.setStreetNumber("4202");
		park0.setStreetName("Valley Drive");
		park0.setGoogleMapDest("49.249783,-123.155250");
		park0.setNeighbourhoodName("Arbutus Ridge");

		// Nelson Park
		park1 = new Park((long) 203);
		park1.setName("Nelson Park");
		park1.setStreetNumber("1030");
		park1.setStreetName("Bute Street");
		park1.setGoogleMapDest("49.282855,-123.129558");
		park1.setNeighbourhoodName("West End");

		// Trillium Park Site
		park2 = new Park((long) 245);
		park2.setName("Trillium Park Site");
		park2.setStreetNumber("");
		park2.setStreetName("National Avenue & Thornton Street");
		park2.setGoogleMapDest("49.275015,-123.093116");
		park2.setNeighbourhoodName("Strathcona");

		// A non-existent park
		park3 = new Park((long) 999);
		park3.setName("Dude Chilling Park");
		park3.setStreetNumber("12345");
		park3.setStreetName("Fake Street");
		park3.setGoogleMapDest("34.232676, -134.000343");
		park3.setNeighbourhoodName("Potato Heights");

		// A Park with null values
		park4 = new Park(null);
		park4.setName(null);
		park4.setStreetNumber(null);
		park4.setStreetName(null);
		park4.setGoogleMapDest(null);
		park4.setNeighbourhoodName(null);

		// Manually create 3 new Facility instances with data taken directly
		// from City of Vancouver Parks Listing dataset, to compare with data generated by
		// the parser.

		// Carnarvon Park's 3 baseball diamonds
		facility0 = new Facility((long) 2, "Baseball Diamonds",
				"2_Baseball Diamonds", "3");
		// Quilchena Park's 1 Disc Golf Course
		facility1 = new Facility((long) 6, "Disc Golf Courses",
				"6_Disc Golf Courses", "1");
		// Pandora Park's 1 Wading Pool
		facility2 = new Facility((long) 57, "Wading Pool", "57_Wading Pool", "1");

		// A non-existant Park's 5 Tennis Courts
		facility3 = new Facility((long) 543, "Tennis Courts", "543_Tennis Courts",
				"12");
		// A Facility with null values
		facility4 = new Facility(null, null, null, null);

	}

	@Test
	public void testParse() {
		runBeforeTests();
		assertTrue(allParks.size() > 0);
		assertTrue(comparePark(park0));
		assertTrue(comparePark(park1));
		assertTrue(comparePark(park2));
		assertFalse(comparePark(park3));
		assertFalse(comparePark(park4));

		assertTrue(allParks.size() > 0);
		assertTrue(compareFacility(facility0));
		assertTrue(compareFacility(facility1));
		assertTrue(compareFacility(facility2));
		assertFalse(compareFacility(facility3));
		assertFalse(compareFacility(facility4));
	}

	private boolean comparePark(Park parkToCompareToParsedPark) {
		for (Park p : allParks) {
			if ((p.getName().equals(parkToCompareToParsedPark.getName()))
					&& (p.getParkId().equals(parkToCompareToParsedPark
							.getParkId()))
					&& (p.getStreetName().equals(parkToCompareToParsedPark
							.getStreetName()))
					&& ((p.getStreetNumber().equals(parkToCompareToParsedPark
							.getStreetNumber())) || p.getStreetNumber().equals(
							"N/A "))
					&& (p.getNeighbourhoodName()
							.equals(parkToCompareToParsedPark
									.getNeighbourhoodName()))) {
				return true;
			}
		}
		return false;
	}

	private boolean compareFacility(Facility facilityToCompareToParsedFacility) {
		for (Facility f : allFacilities) {
			if ((f.getParkId().equals(facilityToCompareToParsedFacility
					.getParkId()))
					&& (f.getFacility()
							.equals(facilityToCompareToParsedFacility
									.getFacility()))
					&& (f.getFacilityID()
							.equals(facilityToCompareToParsedFacility
									.getFacilityID()))
					&& (f.getFacilityCount()
							.equals(facilityToCompareToParsedFacility
									.getFacilityCount()))) {
				return true;
			}
		}
		return false;
	}

}
